/*
 * generated by Xtext
 */
package org.eclipse.net4j.tools.workingset.ui.contentassist;

import org.eclipse.net4j.tools.workingset.evaluation.PropertyRegistry;
import org.eclipse.net4j.tools.workingset.evaluation.TesterRegistry;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EcoreFactory;

import org.eclipse.jface.viewers.StyledString;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class DslProposalProvider extends AbstractDslProposalProvider
{
  private static final int PRIO_DEFAULT = 100;

  private static final int PRIO_PROPERTY = 2000;

  private static final int PRIO_TESTER = 1900;

  private static final int PRIO_BOOLEAN = PRIO_DEFAULT;

  private static final EAttribute IMAGE_EATTRIBUTE = EcoreFactory.eINSTANCE.createEAttribute();

  private static final EOperation IMAGE_EOPERATION = EcoreFactory.eINSTANCE.createEOperation();

  public DslProposalProvider()
  {
  }

  @Override
  public void completePropertyAccess_Property(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor)
  {
    for (String property : PropertyRegistry.INSTANCE.getKeys())
    {
      addProposal(acceptor, context, IMAGE_EATTRIBUTE, property, PRIO_PROPERTY);
    }
  }

  @Override
  public void completeTestExpression_Property(EObject model, Assignment assignment, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor)
  {
    for (String property : TesterRegistry.INSTANCE.getKeys())
    {
      addProposal(acceptor, context, IMAGE_EOPERATION, property + "()", PRIO_TESTER);
    }
  }

  @Override
  public void complete_BooleanLiteral(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor)
  {
    addProposal(acceptor, context, model, "false", PRIO_BOOLEAN);
    addProposal(acceptor, context, model, "true", PRIO_BOOLEAN);
  }

  @Override
  public void complete_Type(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor)
  {
    acceptor.accept(createCompletionProposal("file", context));
    acceptor.accept(createCompletionProposal("folder", context));
    acceptor.accept(createCompletionProposal("project", context));
    acceptor.accept(createCompletionProposal("container", context));
  }

  @Override
  public void complete_Kind(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor)
  {
    acceptor.accept(createCompletionProposal("nature", context));
    acceptor.accept(createCompletionProposal("builder", context));
    acceptor.accept(createCompletionProposal("reference", context));
  }

  @Override
  public void completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext,
      ICompletionProposalAcceptor acceptor)
  {
    if (Character.isLetter(keyword.getValue().charAt(0)))
    {
      super.completeKeyword(keyword, contentAssistContext, acceptor);
    }
  }

  @Override
  public void complete_BOOLEAN(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor)
  {
  }

  @Override
  public void complete_ID(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor)
  {
  }

  @Override
  public void complete_STRING(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor)
  {
  }

  @Override
  public void complete_INT(EObject model, RuleCall ruleCall, ContentAssistContext context,
      ICompletionProposalAcceptor acceptor)
  {
  }

  protected void addProposal(ICompletionProposalAcceptor acceptor, ContentAssistContext context, EObject image,
      String proposal, int prio)
  {
    acceptor.accept(createCompletionProposal(proposal, new StyledString(proposal), getImage(image), prio,
        context.getPrefix(), context));
  }
}
