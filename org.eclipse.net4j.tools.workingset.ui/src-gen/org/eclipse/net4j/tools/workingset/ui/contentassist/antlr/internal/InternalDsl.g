/*
* generated by Xtext
*/
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipse.net4j.tools.workingset.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.net4j.tools.workingset.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipse.net4j.tools.workingset.services.DslGrammarAccess;

}

@parser::members {
 
 	private DslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall()); }
	ruleOrExpression
{ after(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXorExpression
entryRuleXorExpression 
:
{ before(grammarAccess.getXorExpressionRule()); }
	 ruleXorExpression
{ after(grammarAccess.getXorExpressionRule()); } 
	 EOF 
;

// Rule XorExpression
ruleXorExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXorExpressionAccess().getGroup()); }
(rule__XorExpression__Group__0)
{ after(grammarAccess.getXorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression 
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonExpressionAccess().getAlternatives()); }
(rule__ComparisonExpression__Alternatives)
{ after(grammarAccess.getComparisonExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotExpression
entryRuleNotExpression 
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotExpressionAccess().getGroup()); }
(rule__NotExpression__Group__0)
{ after(grammarAccess.getNotExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIsExpression
entryRuleIsExpression 
:
{ before(grammarAccess.getIsExpressionRule()); }
	 ruleIsExpression
{ after(grammarAccess.getIsExpressionRule()); } 
	 EOF 
;

// Rule IsExpression
ruleIsExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIsExpressionAccess().getGroup()); }
(rule__IsExpression__Group__0)
{ after(grammarAccess.getIsExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHasExpression
entryRuleHasExpression 
:
{ before(grammarAccess.getHasExpressionRule()); }
	 ruleHasExpression
{ after(grammarAccess.getHasExpressionRule()); } 
	 EOF 
;

// Rule HasExpression
ruleHasExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHasExpressionAccess().getGroup()); }
(rule__HasExpression__Group__0)
{ after(grammarAccess.getHasExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTestExpression
entryRuleTestExpression 
:
{ before(grammarAccess.getTestExpressionRule()); }
	 ruleTestExpression
{ after(grammarAccess.getTestExpressionRule()); } 
	 EOF 
;

// Rule TestExpression
ruleTestExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestExpressionAccess().getGroup()); }
(rule__TestExpression__Group__0)
{ after(grammarAccess.getTestExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcatExpression
entryRuleConcatExpression 
:
{ before(grammarAccess.getConcatExpressionRule()); }
	 ruleConcatExpression
{ after(grammarAccess.getConcatExpressionRule()); } 
	 EOF 
;

// Rule ConcatExpression
ruleConcatExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcatExpressionAccess().getGroup()); }
(rule__ConcatExpression__Group__0)
{ after(grammarAccess.getConcatExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringExpression
entryRuleStringExpression 
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringExpressionAccess().getAlternatives()); }
(rule__StringExpression__Alternatives)
{ after(grammarAccess.getStringExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyAccess
entryRulePropertyAccess 
:
{ before(grammarAccess.getPropertyAccessRule()); }
	 rulePropertyAccess
{ after(grammarAccess.getPropertyAccessRule()); } 
	 EOF 
;

// Rule PropertyAccess
rulePropertyAccess
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyAccessAccess().getPropertyAssignment()); }
(rule__PropertyAccess__PropertyAssignment)
{ after(grammarAccess.getPropertyAccessAccess().getPropertyAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrOperator
entryRuleOrOperator 
:
{ before(grammarAccess.getOrOperatorRule()); }
	 ruleOrOperator
{ after(grammarAccess.getOrOperatorRule()); } 
	 EOF 
;

// Rule OrOperator
ruleOrOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrOperatorAccess().getAlternatives()); }
(rule__OrOperator__Alternatives)
{ after(grammarAccess.getOrOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleXorOperator
entryRuleXorOperator 
:
{ before(grammarAccess.getXorOperatorRule()); }
	 ruleXorOperator
{ after(grammarAccess.getXorOperatorRule()); } 
	 EOF 
;

// Rule XorOperator
ruleXorOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getXorOperatorAccess().getAlternatives()); }
(rule__XorOperator__Alternatives)
{ after(grammarAccess.getXorOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndOperator
entryRuleAndOperator 
:
{ before(grammarAccess.getAndOperatorRule()); }
	 ruleAndOperator
{ after(grammarAccess.getAndOperatorRule()); } 
	 EOF 
;

// Rule AndOperator
ruleAndOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndOperatorAccess().getAlternatives()); }
(rule__AndOperator__Alternatives)
{ after(grammarAccess.getAndOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotOperator
entryRuleNotOperator 
:
{ before(grammarAccess.getNotOperatorRule()); }
	 ruleNotOperator
{ after(grammarAccess.getNotOperatorRule()); } 
	 EOF 
;

// Rule NotOperator
ruleNotOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotOperatorAccess().getAlternatives()); }
(rule__NotOperator__Alternatives)
{ after(grammarAccess.getNotOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ComparisonOperator
ruleComparisonOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
(rule__ComparisonOperator__Alternatives)
{ after(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule StringOperator
ruleStringOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringOperatorAccess().getAlternatives()); }
(rule__StringOperator__Alternatives)
{ after(grammarAccess.getStringOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Kind
ruleKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindAccess().getAlternatives()); }
(rule__Kind__Alternatives)
{ after(grammarAccess.getKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ComparisonExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_0()); }
(rule__ComparisonExpression__Group_0__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
(rule__ComparisonExpression__Group_1__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getBooleanLiteralParserRuleCall_0()); }
	ruleBooleanLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getBooleanLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getNotExpressionParserRuleCall_1()); }
	ruleNotExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getNotExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getIsExpressionParserRuleCall_2()); }
	ruleIsExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getIsExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getHasExpressionParserRuleCall_3()); }
	ruleHasExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getHasExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getTestExpressionParserRuleCall_4()); }
	ruleTestExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getTestExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_5()); }
(rule__PrimaryExpression__Group_5__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringExpressionAccess().getStringLiteralParserRuleCall_0()); }
	ruleStringLiteral
{ after(grammarAccess.getStringExpressionAccess().getStringLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStringExpressionAccess().getPropertyAccessParserRuleCall_1()); }
	rulePropertyAccess
{ after(grammarAccess.getStringExpressionAccess().getPropertyAccessParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperatorAccess().getVerticalLineKeyword_0()); }

	'|' 

{ after(grammarAccess.getOrOperatorAccess().getVerticalLineKeyword_0()); }
)

    |(
{ before(grammarAccess.getOrOperatorAccess().getVerticalLineVerticalLineKeyword_1()); }

	'||' 

{ after(grammarAccess.getOrOperatorAccess().getVerticalLineVerticalLineKeyword_1()); }
)

    |(
{ before(grammarAccess.getOrOperatorAccess().getOrKeyword_2()); }

	'or' 

{ after(grammarAccess.getOrOperatorAccess().getOrKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XorOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorOperatorAccess().getCircumflexAccentKeyword_0()); }

	'^' 

{ after(grammarAccess.getXorOperatorAccess().getCircumflexAccentKeyword_0()); }
)

    |(
{ before(grammarAccess.getXorOperatorAccess().getXorKeyword_1()); }

	'xor' 

{ after(grammarAccess.getXorOperatorAccess().getXorKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperatorAccess().getAmpersandKeyword_0()); }

	'&' 

{ after(grammarAccess.getAndOperatorAccess().getAmpersandKeyword_0()); }
)

    |(
{ before(grammarAccess.getAndOperatorAccess().getAmpersandAmpersandKeyword_1()); }

	'&&' 

{ after(grammarAccess.getAndOperatorAccess().getAmpersandAmpersandKeyword_1()); }
)

    |(
{ before(grammarAccess.getAndOperatorAccess().getAndKeyword_2()); }

	'and' 

{ after(grammarAccess.getAndOperatorAccess().getAndKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotOperatorAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getNotOperatorAccess().getExclamationMarkKeyword_0()); }
)

    |(
{ before(grammarAccess.getNotOperatorAccess().getNotKeyword_1()); }

	'not' 

{ after(grammarAccess.getNotOperatorAccess().getNotKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getEQ2EnumLiteralDeclaration_1()); }
(	'==' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getEQ2EnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getNEEnumLiteralDeclaration_2()); }
(	'!=' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getNEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getNE2EnumLiteralDeclaration_3()); }
(	'<>' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getNE2EnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getGTEnumLiteralDeclaration_4()); }
(	'>' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getGTEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getGEEnumLiteralDeclaration_5()); }
(	'>=' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getGEEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getLTEnumLiteralDeclaration_6()); }
(	'<' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getLTEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getComparisonOperatorAccess().getLEEnumLiteralDeclaration_7()); }
(	'<=' 
)
{ after(grammarAccess.getComparisonOperatorAccess().getLEEnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getStringOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getEQ2EnumLiteralDeclaration_1()); }
(	'==' 
)
{ after(grammarAccess.getStringOperatorAccess().getEQ2EnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getNEEnumLiteralDeclaration_2()); }
(	'!=' 
)
{ after(grammarAccess.getStringOperatorAccess().getNEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getNE2EnumLiteralDeclaration_3()); }
(	'<>' 
)
{ after(grammarAccess.getStringOperatorAccess().getNE2EnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getGTEnumLiteralDeclaration_4()); }
(	'>' 
)
{ after(grammarAccess.getStringOperatorAccess().getGTEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getGEEnumLiteralDeclaration_5()); }
(	'>=' 
)
{ after(grammarAccess.getStringOperatorAccess().getGEEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getLTEnumLiteralDeclaration_6()); }
(	'<' 
)
{ after(grammarAccess.getStringOperatorAccess().getLTEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getLEEnumLiteralDeclaration_7()); }
(	'<=' 
)
{ after(grammarAccess.getStringOperatorAccess().getLEEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getLIKEEnumLiteralDeclaration_8()); }
(	'like' 
)
{ after(grammarAccess.getStringOperatorAccess().getLIKEEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getLIKE2EnumLiteralDeclaration_9()); }
(	'~' 
)
{ after(grammarAccess.getStringOperatorAccess().getLIKE2EnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getUNLIKEEnumLiteralDeclaration_10()); }
(	'unlike' 
)
{ after(grammarAccess.getStringOperatorAccess().getUNLIKEEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getUNLIKE2EnumLiteralDeclaration_11()); }
(	'!~' 
)
{ after(grammarAccess.getStringOperatorAccess().getUNLIKE2EnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getSTARTSEnumLiteralDeclaration_12()); }
(	'starts' 
)
{ after(grammarAccess.getStringOperatorAccess().getSTARTSEnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getENDSEnumLiteralDeclaration_13()); }
(	'ends' 
)
{ after(grammarAccess.getStringOperatorAccess().getENDSEnumLiteralDeclaration_13()); }
)

    |(
{ before(grammarAccess.getStringOperatorAccess().getCONTAINSEnumLiteralDeclaration_14()); }
(	'contains' 
)
{ after(grammarAccess.getStringOperatorAccess().getCONTAINSEnumLiteralDeclaration_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getFILEEnumLiteralDeclaration_0()); }
(	'file' 
)
{ after(grammarAccess.getTypeAccess().getFILEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getFOLDEREnumLiteralDeclaration_1()); }
(	'folder' 
)
{ after(grammarAccess.getTypeAccess().getFOLDEREnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getCONTAINEREnumLiteralDeclaration_2()); }
(	'container' 
)
{ after(grammarAccess.getTypeAccess().getCONTAINEREnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getPROJECTEnumLiteralDeclaration_3()); }
(	'project' 
)
{ after(grammarAccess.getTypeAccess().getPROJECTEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Kind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKindAccess().getREFERENCEEnumLiteralDeclaration_0()); }
(	'reference' 
)
{ after(grammarAccess.getKindAccess().getREFERENCEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getKindAccess().getNATUREEnumLiteralDeclaration_1()); }
(	'nature' 
)
{ after(grammarAccess.getKindAccess().getNATUREEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getKindAccess().getBUILDEREnumLiteralDeclaration_2()); }
(	'builder' 
)
{ after(grammarAccess.getKindAccess().getBUILDEREnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); }
	ruleXorExpression
{ after(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrOperatorParserRuleCall_1_1()); }
	ruleOrOperator
{ after(grammarAccess.getOrExpressionAccess().getOrOperatorParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
(rule__OrExpression__RightAssignment_1_2)
{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__XorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpression__Group__0__Impl
	rule__XorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExpressionAccess().getGroup_1()); }
(rule__XorExpression__Group_1__0)*
{ after(grammarAccess.getXorExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__XorExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpression__Group_1__0__Impl
	rule__XorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpression__Group_1__1__Impl
	rule__XorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExpressionAccess().getXorOperatorParserRuleCall_1_1()); }
	ruleXorOperator
{ after(grammarAccess.getXorExpressionAccess().getXorOperatorParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__XorExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2()); }
(rule__XorExpression__RightAssignment_1_2)
{ after(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	ruleComparisonExpression
{ after(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndOperatorParserRuleCall_1_1()); }
	ruleAndOperator
{ after(grammarAccess.getAndExpressionAccess().getAndOperatorParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
(rule__AndExpression__RightAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComparisonExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_0__0__Impl
	rule__ComparisonExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getPrimaryExpressionParserRuleCall_0_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getComparisonExpressionAccess().getPrimaryExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_0_1()); }
(rule__ComparisonExpression__Group_0_1__0)*
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_0_1__0__Impl
	rule__ComparisonExpression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getBooleanComparisonLeftAction_0_1_0()); }
(

)
{ after(grammarAccess.getComparisonExpressionAccess().getBooleanComparisonLeftAction_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_0_1__1__Impl
	rule__ComparisonExpression__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_0_1_1()); }
(rule__ComparisonExpression__OperatorAssignment_0_1_1)
{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_0_1_2()); }
(rule__ComparisonExpression__RightAssignment_0_1_2)
{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComparisonExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getConcatExpressionParserRuleCall_1_0()); }
	ruleConcatExpression
{ after(grammarAccess.getComparisonExpressionAccess().getConcatExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1_1()); }
(rule__ComparisonExpression__Group_1_1__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1_1()); }
(rule__ComparisonExpression__Group_1_1__0)*
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_1__0__Impl
	rule__ComparisonExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getStringComparisonLeftAction_1_1_0()); }
(

)
{ after(grammarAccess.getComparisonExpressionAccess().getStringComparisonLeftAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_1__1__Impl
	rule__ComparisonExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1_1()); }
(rule__ComparisonExpression__OperatorAssignment_1_1_1)
{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_1_2()); }
(rule__ComparisonExpression__RightAssignment_1_1_2)
{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_5__0__Impl
	rule__PrimaryExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_5_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_5__1__Impl
	rule__PrimaryExpression__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getOrExpressionParserRuleCall_5_1()); }
	ruleOrExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getOrExpressionParserRuleCall_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_5_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NotExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__0__Impl
	rule__NotExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0()); }
(

)
{ after(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__1__Impl
	rule__NotExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getNotOperatorParserRuleCall_1()); }
	ruleNotOperator
{ after(grammarAccess.getNotExpressionAccess().getNotOperatorParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getRightAssignment_2()); }
(rule__NotExpression__RightAssignment_2)
{ after(grammarAccess.getNotExpressionAccess().getRightAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IsExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IsExpression__Group__0__Impl
	rule__IsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IsExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIsExpressionAccess().getIsExpressionAction_0()); }
(

)
{ after(grammarAccess.getIsExpressionAccess().getIsExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IsExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IsExpression__Group__1__Impl
	rule__IsExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IsExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIsExpressionAccess().getIsKeyword_1()); }

	'is' 

{ after(grammarAccess.getIsExpressionAccess().getIsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IsExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IsExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IsExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIsExpressionAccess().getTypeAssignment_2()); }
(rule__IsExpression__TypeAssignment_2)
{ after(grammarAccess.getIsExpressionAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__HasExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasExpression__Group__0__Impl
	rule__HasExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HasExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasExpressionAccess().getHasExpressionAction_0()); }
(

)
{ after(grammarAccess.getHasExpressionAccess().getHasExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HasExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasExpression__Group__1__Impl
	rule__HasExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HasExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasExpressionAccess().getHasKeyword_1()); }

	'has' 

{ after(grammarAccess.getHasExpressionAccess().getHasKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HasExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasExpression__Group__2__Impl
	rule__HasExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HasExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasExpressionAccess().getKindAssignment_2()); }
(rule__HasExpression__KindAssignment_2)
{ after(grammarAccess.getHasExpressionAccess().getKindAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HasExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HasExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HasExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasExpressionAccess().getWhatAssignment_3()); }
(rule__HasExpression__WhatAssignment_3)
{ after(grammarAccess.getHasExpressionAccess().getWhatAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TestExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group__0__Impl
	rule__TestExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getTestExpressionAction_0()); }
(

)
{ after(grammarAccess.getTestExpressionAccess().getTestExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group__1__Impl
	rule__TestExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getPropertyAssignment_1()); }
(rule__TestExpression__PropertyAssignment_1)
{ after(grammarAccess.getTestExpressionAccess().getPropertyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group__2__Impl
	rule__TestExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getGroup_2()); }
(rule__TestExpression__Group_2__0)*
{ after(grammarAccess.getTestExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group__3__Impl
	rule__TestExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getTestExpressionAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group__4__Impl
	rule__TestExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getArgsAssignment_4()); }
(rule__TestExpression__ArgsAssignment_4)
{ after(grammarAccess.getTestExpressionAccess().getArgsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group__5__Impl
	rule__TestExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getGroup_5()); }
(rule__TestExpression__Group_5__0)*
{ after(grammarAccess.getTestExpressionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group__6__Impl
	rule__TestExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getTestExpressionAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group__7__Impl
	rule__TestExpression__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getIsKeyword_7()); }

	'is' 

{ after(grammarAccess.getTestExpressionAccess().getIsKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestExpression__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getExpectedAssignment_8()); }
(rule__TestExpression__ExpectedAssignment_8)
{ after(grammarAccess.getTestExpressionAccess().getExpectedAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__TestExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group_2__0__Impl
	rule__TestExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getFullStopKeyword_2_0()); }

	'.' 

{ after(grammarAccess.getTestExpressionAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getPropertyAssignment_2_1()); }
(rule__TestExpression__PropertyAssignment_2_1)
{ after(grammarAccess.getTestExpressionAccess().getPropertyAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TestExpression__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group_5__0__Impl
	rule__TestExpression__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getCommaKeyword_5_0()); }

	',' 

{ after(grammarAccess.getTestExpressionAccess().getCommaKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestExpression__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getArgsAssignment_5_1()); }
(rule__TestExpression__ArgsAssignment_5_1)
{ after(grammarAccess.getTestExpressionAccess().getArgsAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcatExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatExpression__Group__0__Impl
	rule__ConcatExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatExpressionAccess().getStringExpressionParserRuleCall_0()); }
	ruleStringExpression
{ after(grammarAccess.getConcatExpressionAccess().getStringExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatExpressionAccess().getGroup_1()); }
(rule__ConcatExpression__Group_1__0)*
{ after(grammarAccess.getConcatExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConcatExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatExpression__Group_1__0__Impl
	rule__ConcatExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatExpressionAccess().getConcatExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getConcatExpressionAccess().getConcatExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatExpression__Group_1__1__Impl
	rule__ConcatExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatExpressionAccess().getPlusSignKeyword_1_1()); }

	'+' 

{ after(grammarAccess.getConcatExpressionAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConcatExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConcatExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatExpressionAccess().getRightAssignment_1_2()); }
(rule__ConcatExpression__RightAssignment_1_2)
{ after(grammarAccess.getConcatExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__OrExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); }
	ruleXorExpression{ after(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
	ruleComparisonExpression{ after(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOperatorComparisonOperatorEnumRuleCall_0_1_1_0()); }
	ruleComparisonOperator{ after(grammarAccess.getComparisonExpressionAccess().getOperatorComparisonOperatorEnumRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_0_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightPrimaryExpressionParserRuleCall_0_1_2_0()); }
	rulePrimaryExpression{ after(grammarAccess.getComparisonExpressionAccess().getRightPrimaryExpressionParserRuleCall_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOperatorStringOperatorEnumRuleCall_1_1_1_0()); }
	ruleStringOperator{ after(grammarAccess.getComparisonExpressionAccess().getOperatorStringOperatorEnumRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightConcatExpressionParserRuleCall_1_1_2_0()); }
	ruleConcatExpression{ after(grammarAccess.getComparisonExpressionAccess().getRightConcatExpressionParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__RightAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getRightPrimaryExpressionParserRuleCall_2_0()); }
	rulePrimaryExpression{ after(grammarAccess.getNotExpressionAccess().getRightPrimaryExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IsExpression__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIsExpressionAccess().getTypeTypeEnumRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getIsExpressionAccess().getTypeTypeEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HasExpression__KindAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasExpressionAccess().getKindKindEnumRuleCall_2_0()); }
	ruleKind{ after(grammarAccess.getHasExpressionAccess().getKindKindEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HasExpression__WhatAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHasExpressionAccess().getWhatConcatExpressionParserRuleCall_3_0()); }
	ruleConcatExpression{ after(grammarAccess.getHasExpressionAccess().getWhatConcatExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__PropertyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getPropertyIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTestExpressionAccess().getPropertyIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__PropertyAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getPropertyIDTerminalRuleCall_2_1_0()); }
	RULE_ID{ after(grammarAccess.getTestExpressionAccess().getPropertyIDTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__ArgsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getArgsConcatExpressionParserRuleCall_4_0()); }
	ruleConcatExpression{ after(grammarAccess.getTestExpressionAccess().getArgsConcatExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__ArgsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getArgsConcatExpressionParserRuleCall_5_1_0()); }
	ruleConcatExpression{ after(grammarAccess.getTestExpressionAccess().getArgsConcatExpressionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__ExpectedAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getExpectedConcatExpressionParserRuleCall_8_0()); }
	ruleConcatExpression{ after(grammarAccess.getTestExpressionAccess().getExpectedConcatExpressionParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcatExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcatExpressionAccess().getRightStringExpressionParserRuleCall_1_2_0()); }
	ruleStringExpression{ after(grammarAccess.getConcatExpressionAccess().getRightStringExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyAccess__PropertyAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccessAccess().getPropertyIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getPropertyAccessAccess().getPropertyIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_BOOLEAN : ('false'|'true');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


