/*
* generated by Xtext
*/
package org.eclipse.net4j.tools.workingset.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.net4j.tools.workingset.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {
	
	@Inject
	private DslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.net4j.tools.workingset.ui.contentassist.antlr.internal.InternalDslParser createParser() {
		org.eclipse.net4j.tools.workingset.ui.contentassist.antlr.internal.InternalDslParser result = new org.eclipse.net4j.tools.workingset.ui.contentassist.antlr.internal.InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getComparisonExpressionAccess().getAlternatives(), "rule__ComparisonExpression__Alternatives");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getStringExpressionAccess().getAlternatives(), "rule__StringExpression__Alternatives");
					put(grammarAccess.getOrOperatorAccess().getAlternatives(), "rule__OrOperator__Alternatives");
					put(grammarAccess.getXorOperatorAccess().getAlternatives(), "rule__XorOperator__Alternatives");
					put(grammarAccess.getAndOperatorAccess().getAlternatives(), "rule__AndOperator__Alternatives");
					put(grammarAccess.getNotOperatorAccess().getAlternatives(), "rule__NotOperator__Alternatives");
					put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
					put(grammarAccess.getStringOperatorAccess().getAlternatives(), "rule__StringOperator__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getKindAccess().getAlternatives(), "rule__Kind__Alternatives");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getXorExpressionAccess().getGroup(), "rule__XorExpression__Group__0");
					put(grammarAccess.getXorExpressionAccess().getGroup_1(), "rule__XorExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getComparisonExpressionAccess().getGroup_0(), "rule__ComparisonExpression__Group_0__0");
					put(grammarAccess.getComparisonExpressionAccess().getGroup_0_1(), "rule__ComparisonExpression__Group_0_1__0");
					put(grammarAccess.getComparisonExpressionAccess().getGroup_1(), "rule__ComparisonExpression__Group_1__0");
					put(grammarAccess.getComparisonExpressionAccess().getGroup_1_1(), "rule__ComparisonExpression__Group_1_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_5(), "rule__PrimaryExpression__Group_5__0");
					put(grammarAccess.getNotExpressionAccess().getGroup(), "rule__NotExpression__Group__0");
					put(grammarAccess.getIsExpressionAccess().getGroup(), "rule__IsExpression__Group__0");
					put(grammarAccess.getHasExpressionAccess().getGroup(), "rule__HasExpression__Group__0");
					put(grammarAccess.getTestExpressionAccess().getGroup(), "rule__TestExpression__Group__0");
					put(grammarAccess.getTestExpressionAccess().getGroup_2(), "rule__TestExpression__Group_2__0");
					put(grammarAccess.getTestExpressionAccess().getGroup_5(), "rule__TestExpression__Group_5__0");
					put(grammarAccess.getConcatExpressionAccess().getGroup(), "rule__ConcatExpression__Group__0");
					put(grammarAccess.getConcatExpressionAccess().getGroup_1(), "rule__ConcatExpression__Group_1__0");
					put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2(), "rule__OrExpression__RightAssignment_1_2");
					put(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2(), "rule__XorExpression__RightAssignment_1_2");
					put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
					put(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_0_1_1(), "rule__ComparisonExpression__OperatorAssignment_0_1_1");
					put(grammarAccess.getComparisonExpressionAccess().getRightAssignment_0_1_2(), "rule__ComparisonExpression__RightAssignment_0_1_2");
					put(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1_1(), "rule__ComparisonExpression__OperatorAssignment_1_1_1");
					put(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_1_2(), "rule__ComparisonExpression__RightAssignment_1_1_2");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
					put(grammarAccess.getNotExpressionAccess().getRightAssignment_2(), "rule__NotExpression__RightAssignment_2");
					put(grammarAccess.getIsExpressionAccess().getTypeAssignment_2(), "rule__IsExpression__TypeAssignment_2");
					put(grammarAccess.getHasExpressionAccess().getKindAssignment_2(), "rule__HasExpression__KindAssignment_2");
					put(grammarAccess.getHasExpressionAccess().getWhatAssignment_3(), "rule__HasExpression__WhatAssignment_3");
					put(grammarAccess.getTestExpressionAccess().getPropertyAssignment_1(), "rule__TestExpression__PropertyAssignment_1");
					put(grammarAccess.getTestExpressionAccess().getPropertyAssignment_2_1(), "rule__TestExpression__PropertyAssignment_2_1");
					put(grammarAccess.getTestExpressionAccess().getArgsAssignment_4(), "rule__TestExpression__ArgsAssignment_4");
					put(grammarAccess.getTestExpressionAccess().getArgsAssignment_5_1(), "rule__TestExpression__ArgsAssignment_5_1");
					put(grammarAccess.getTestExpressionAccess().getExpectedAssignment_8(), "rule__TestExpression__ExpectedAssignment_8");
					put(grammarAccess.getConcatExpressionAccess().getRightAssignment_1_2(), "rule__ConcatExpression__RightAssignment_1_2");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getPropertyAccessAccess().getPropertyAssignment(), "rule__PropertyAccess__PropertyAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.net4j.tools.workingset.ui.contentassist.antlr.internal.InternalDslParser typedParser = (org.eclipse.net4j.tools.workingset.ui.contentassist.antlr.internal.InternalDslParser) parser;
			typedParser.entryRuleBooleanExpression();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
