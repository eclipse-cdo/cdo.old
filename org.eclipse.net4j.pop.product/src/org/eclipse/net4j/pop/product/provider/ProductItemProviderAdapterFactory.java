/**
 * Copyright (c) 2004 - 2008 Eike Stepper, Germany.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Eike Stepper - initial API and implementation
 *
 * $Id: ProductItemProviderAdapterFactory.java,v 1.1 2008-08-08 10:10:39 estepper Exp $
 */
package org.eclipse.net4j.pop.product.provider;

import org.eclipse.net4j.pop.product.ProductPackage;
import org.eclipse.net4j.pop.product.util.ProductAdapterFactory;
import org.eclipse.net4j.pop.product.util.ProductPlugin;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 */
public class ProductItemProviderAdapterFactory extends ProductAdapterFactory implements ComposeableAdapterFactory,
    IChangeNotifier, IDisposable, IChildCreationExtender
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This helps manage the child creation extenders.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(
      ProductPlugin.INSTANCE, ProductPackage.eNS_URI);

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public ProductItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
    supportedTypes.add(IItemColorProvider.class);
    supportedTypes.add(IItemFontProvider.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.pop.product.PopProduct} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected PopProductItemProvider popProductItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.pop.product.PopProduct}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPopProductAdapter()
  {
    if (popProductItemProvider == null)
    {
      popProductItemProvider = new PopProductItemProvider(this);
    }

    return popProductItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.pop.product.SecondaryModule} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SecondaryModuleItemProvider secondaryModuleItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.pop.product.SecondaryModule}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSecondaryModuleAdapter()
  {
    if (secondaryModuleItemProvider == null)
    {
      secondaryModuleItemProvider = new SecondaryModuleItemProvider(this);
    }

    return secondaryModuleItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.pop.product.WorkingSet} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected WorkingSetItemProvider workingSetItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.pop.product.WorkingSet}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createWorkingSetAdapter()
  {
    if (workingSetItemProvider == null)
    {
      workingSetItemProvider = new WorkingSetItemProvider(this);
    }

    return workingSetItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.pop.product.WorkspaceProject} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected WorkspaceProjectItemProvider workspaceProjectItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.pop.product.WorkspaceProject}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createWorkspaceProjectAdapter()
  {
    if (workspaceProjectItemProvider == null)
    {
      workspaceProjectItemProvider = new WorkspaceProjectItemProvider(this);
    }

    return workspaceProjectItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.pop.product.File} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected FileItemProvider fileItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.pop.product.File}. <!-- begin-user-doc --> <!-- end-user-doc
   * -->
   * 
   * @generated
   */
  @Override
  public Adapter createFileAdapter()
  {
    if (fileItemProvider == null)
    {
      fileItemProvider = new FileItemProvider(this);
    }

    return fileItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.pop.product.Folder} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected FolderItemProvider folderItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.pop.product.Folder}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFolderAdapter()
  {
    if (folderItemProvider == null)
    {
      folderItemProvider = new FolderItemProvider(this);
    }

    return folderItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.pop.product.Archive} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected ArchiveItemProvider archiveItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.pop.product.Archive}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createArchiveAdapter()
  {
    if (archiveItemProvider == null)
    {
      archiveItemProvider = new ArchiveItemProvider(this);
    }

    return archiveItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.net4j.pop.product.ArchiveContent} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected ArchiveContentItemProvider archiveContentItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.net4j.pop.product.ArchiveContent}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createArchiveContentAdapter()
  {
    if (archiveContentItemProvider == null)
    {
      archiveContentItemProvider = new ArchiveContentItemProvider(this);
    }

    return archiveContentItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public List<IChildCreationExtender> getChildCreationExtenders()
  {
    return childCreationExtenderManager.getChildCreationExtenders();
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain)
  {
    return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public ResourceLocator getResourceLocator()
  {
    return childCreationExtenderManager;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (popProductItemProvider != null)
      popProductItemProvider.dispose();
    if (secondaryModuleItemProvider != null)
      secondaryModuleItemProvider.dispose();
    if (workingSetItemProvider != null)
      workingSetItemProvider.dispose();
    if (workspaceProjectItemProvider != null)
      workspaceProjectItemProvider.dispose();
    if (fileItemProvider != null)
      fileItemProvider.dispose();
    if (folderItemProvider != null)
      folderItemProvider.dispose();
    if (archiveItemProvider != null)
      archiveItemProvider.dispose();
    if (archiveContentItemProvider != null)
      archiveContentItemProvider.dispose();
  }

}
