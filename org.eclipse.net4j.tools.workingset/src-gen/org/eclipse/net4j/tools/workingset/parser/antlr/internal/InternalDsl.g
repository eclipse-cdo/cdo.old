/*
* generated by Xtext
*/
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipse.net4j.tools.workingset.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.net4j.tools.workingset.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.net4j.tools.workingset.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;
 	
    public InternalDslParser(TokenStream input, IAstFactory factory, DslGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/net4j/tools/workingset/parser/antlr/internal/InternalDsl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "BooleanExpression";	
   	}
   	
   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanExpressionRule(), currentNode); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall(), currentNode); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrExpressionRule(), currentNode); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0(), currentNode); 
    }
    this_XorExpression_0=ruleXorExpression
    { 
        $current = $this_XorExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getOrOperatorParserRuleCall_1_1(), currentNode); 
    }
ruleOrOperator
    { 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleXorExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"XorExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleXorExpression
entryRuleXorExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXorExpressionRule(), currentNode); }
	 iv_ruleXorExpression=ruleXorExpression 
	 { $current=$iv_ruleXorExpression.current; } 
	 EOF 
;

// Rule XorExpression
ruleXorExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0(), currentNode); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getXorExpressionAccess().getXorOperatorParserRuleCall_1_1(), currentNode); 
    }
ruleXorOperator
    { 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXorExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"AndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndExpressionRule(), currentNode); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getComparisonExpressionParserRuleCall_0(), currentNode); 
    }
    this_ComparisonExpression_0=ruleComparisonExpression
    { 
        $current = $this_ComparisonExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getAndOperatorParserRuleCall_1_1(), currentNode); 
    }
ruleAndOperator
    { 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleComparisonExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"ComparisonExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComparisonExpressionRule(), currentNode); }
	 iv_ruleComparisonExpression=ruleComparisonExpression 
	 { $current=$iv_ruleComparisonExpression.current; } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getPrimaryExpressionParserRuleCall_0_0(), currentNode); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getComparisonExpressionAccess().getBooleanComparisonLeftAction_0_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getComparisonExpressionAccess().getBooleanComparisonLeftAction_0_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getOperatorComparisonOperatorEnumRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_operator_2_0=ruleComparisonOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_2_0, 
	        		"ComparisonOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightPrimaryExpressionParserRuleCall_0_1_2_0(), currentNode); 
	    }
		lv_right_3_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"PrimaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getConcatExpressionParserRuleCall_1_0(), currentNode); 
    }
    this_ConcatExpression_4=ruleConcatExpression
    { 
        $current = $this_ConcatExpression_4.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getComparisonExpressionAccess().getStringComparisonLeftAction_1_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getComparisonExpressionAccess().getStringComparisonLeftAction_1_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getOperatorStringOperatorEnumRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_operator_6_0=ruleStringOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operator",
	        		lv_operator_6_0, 
	        		"StringOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightConcatExpressionParserRuleCall_1_1_2_0(), currentNode); 
	    }
		lv_right_7_0=ruleConcatExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComparisonExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_7_0, 
	        		"ConcatExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getBooleanLiteralParserRuleCall_0(), currentNode); 
    }
    this_BooleanLiteral_0=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNotExpressionParserRuleCall_1(), currentNode); 
    }
    this_NotExpression_1=ruleNotExpression
    { 
        $current = $this_NotExpression_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getIsExpressionParserRuleCall_2(), currentNode); 
    }
    this_IsExpression_2=ruleIsExpression
    { 
        $current = $this_IsExpression_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getHasExpressionParserRuleCall_3(), currentNode); 
    }
    this_HasExpression_3=ruleHasExpression
    { 
        $current = $this_HasExpression_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTestExpressionParserRuleCall_4(), currentNode); 
    }
    this_TestExpression_4=ruleTestExpression
    { 
        $current = $this_TestExpression_4.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_5_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getOrExpressionParserRuleCall_5_1(), currentNode); 
    }
    this_OrExpression_6=ruleOrExpression
    { 
        $current = $this_OrExpression_6.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_5_2(), null); 
    }
))
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralRule(), currentNode); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			createLeafNode(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"BOOLEAN", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNotExpressionRule(), currentNode); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNotExpressionAccess().getNotExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)
    { 
        currentNode=createCompositeNode(grammarAccess.getNotExpressionAccess().getNotOperatorParserRuleCall_1(), currentNode); 
    }
ruleNotOperator
    { 
        currentNode = currentNode.getParent();
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNotExpressionAccess().getRightPrimaryExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_right_2_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNotExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_2_0, 
	        		"PrimaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleIsExpression
entryRuleIsExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIsExpressionRule(), currentNode); }
	 iv_ruleIsExpression=ruleIsExpression 
	 { $current=$iv_ruleIsExpression.current; } 
	 EOF 
;

// Rule IsExpression
ruleIsExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getIsExpressionAccess().getIsExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIsExpressionAccess().getIsExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'is' 
    {
        createLeafNode(grammarAccess.getIsExpressionAccess().getIsKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIsExpressionAccess().getTypeTypeEnumRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIsExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"Type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleHasExpression
entryRuleHasExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getHasExpressionRule(), currentNode); }
	 iv_ruleHasExpression=ruleHasExpression 
	 { $current=$iv_ruleHasExpression.current; } 
	 EOF 
;

// Rule HasExpression
ruleHasExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getHasExpressionAccess().getHasExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getHasExpressionAccess().getHasExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'has' 
    {
        createLeafNode(grammarAccess.getHasExpressionAccess().getHasKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getHasExpressionAccess().getKindKindEnumRuleCall_2_0(), currentNode); 
	    }
		lv_kind_2_0=ruleKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHasExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"kind",
	        		lv_kind_2_0, 
	        		"Kind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getHasExpressionAccess().getWhatConcatExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_what_3_0=ruleConcatExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHasExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"what",
	        		lv_what_3_0, 
	        		"ConcatExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTestExpression
entryRuleTestExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTestExpressionRule(), currentNode); }
	 iv_ruleTestExpression=ruleTestExpression 
	 { $current=$iv_ruleTestExpression.current; } 
	 EOF 
;

// Rule TestExpression
ruleTestExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getTestExpressionAccess().getTestExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTestExpressionAccess().getTestExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_property_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTestExpressionAccess().getPropertyIDTerminalRuleCall_1_0(), "property"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTestExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"property",
	        		lv_property_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'.' 
    {
        createLeafNode(grammarAccess.getTestExpressionAccess().getFullStopKeyword_2_0(), null); 
    }
(
(
		lv_property_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTestExpressionAccess().getPropertyIDTerminalRuleCall_2_1_0(), "property"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTestExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"property",
	        		lv_property_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*	'(' 
    {
        createLeafNode(grammarAccess.getTestExpressionAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTestExpressionAccess().getArgsConcatExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_args_5_0=ruleConcatExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTestExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"args",
	        		lv_args_5_0, 
	        		"ConcatExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTestExpressionAccess().getCommaKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTestExpressionAccess().getArgsConcatExpressionParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_args_7_0=ruleConcatExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTestExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"args",
	        		lv_args_7_0, 
	        		"ConcatExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getTestExpressionAccess().getRightParenthesisKeyword_6(), null); 
    }
	'is' 
    {
        createLeafNode(grammarAccess.getTestExpressionAccess().getIsKeyword_7(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTestExpressionAccess().getExpectedConcatExpressionParserRuleCall_8_0(), currentNode); 
	    }
		lv_expected_10_0=ruleConcatExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTestExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expected",
	        		lv_expected_10_0, 
	        		"ConcatExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleConcatExpression
entryRuleConcatExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConcatExpressionRule(), currentNode); }
	 iv_ruleConcatExpression=ruleConcatExpression 
	 { $current=$iv_ruleConcatExpression.current; } 
	 EOF 
;

// Rule ConcatExpression
ruleConcatExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getConcatExpressionAccess().getStringExpressionParserRuleCall_0(), currentNode); 
    }
    this_StringExpression_0=ruleStringExpression
    { 
        $current = $this_StringExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getConcatExpressionAccess().getConcatExpressionLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConcatExpressionAccess().getConcatExpressionLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'+' 
    {
        createLeafNode(grammarAccess.getConcatExpressionAccess().getPlusSignKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcatExpressionAccess().getRightStringExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleStringExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcatExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"StringExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringExpressionRule(), currentNode); }
	 iv_ruleStringExpression=ruleStringExpression 
	 { $current=$iv_ruleStringExpression.current; } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStringExpressionAccess().getStringLiteralParserRuleCall_0(), currentNode); 
    }
    this_StringLiteral_0=ruleStringLiteral
    { 
        $current = $this_StringLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStringExpressionAccess().getPropertyAccessParserRuleCall_1(), currentNode); 
    }
    this_PropertyAccess_1=rulePropertyAccess
    { 
        $current = $this_PropertyAccess_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralRule(), currentNode); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRulePropertyAccess
entryRulePropertyAccess returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyAccessRule(), currentNode); }
	 iv_rulePropertyAccess=rulePropertyAccess 
	 { $current=$iv_rulePropertyAccess.current; } 
	 EOF 
;

// Rule PropertyAccess
rulePropertyAccess returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_property_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPropertyAccessAccess().getPropertyIDTerminalRuleCall_0(), "property"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyAccessRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"property",
	        		lv_property_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleOrOperator
entryRuleOrOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrOperatorRule(), currentNode); } 
	 iv_ruleOrOperator=ruleOrOperator 
	 { $current=$iv_ruleOrOperator.current.getText(); }  
	 EOF 
;

// Rule OrOperator
ruleOrOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='|' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOrOperatorAccess().getVerticalLineKeyword_0(), null); 
    }

    |
	kw='||' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOrOperatorAccess().getVerticalLineVerticalLineKeyword_1(), null); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOrOperatorAccess().getOrKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleXorOperator
entryRuleXorOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXorOperatorRule(), currentNode); } 
	 iv_ruleXorOperator=ruleXorOperator 
	 { $current=$iv_ruleXorOperator.current.getText(); }  
	 EOF 
;

// Rule XorOperator
ruleXorOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='^' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getXorOperatorAccess().getCircumflexAccentKeyword_0(), null); 
    }

    |
	kw='xor' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getXorOperatorAccess().getXorKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleAndOperator
entryRuleAndOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndOperatorRule(), currentNode); } 
	 iv_ruleAndOperator=ruleAndOperator 
	 { $current=$iv_ruleAndOperator.current.getText(); }  
	 EOF 
;

// Rule AndOperator
ruleAndOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='&' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAndOperatorAccess().getAmpersandKeyword_0(), null); 
    }

    |
	kw='&&' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAndOperatorAccess().getAmpersandAmpersandKeyword_1(), null); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAndOperatorAccess().getAndKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleNotOperator
entryRuleNotOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNotOperatorRule(), currentNode); } 
	 iv_ruleNotOperator=ruleNotOperator 
	 { $current=$iv_ruleNotOperator.current.getText(); }  
	 EOF 
;

// Rule NotOperator
ruleNotOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='!' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNotOperatorAccess().getExclamationMarkKeyword_0(), null); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNotOperatorAccess().getNotKeyword_1(), null); 
    }
)
    ;





// Rule ComparisonOperator
ruleComparisonOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'=' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getEQEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'==' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getEQ2EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getEQ2EnumLiteralDeclaration_1(), null); 
    }
)
    |(	'!=' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getNEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getNEEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'<>' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getNE2EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getNE2EnumLiteralDeclaration_3(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getGTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getGTEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getGEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getGEEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'<' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getLTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getLTEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getLEEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getComparisonOperatorAccess().getLEEnumLiteralDeclaration_7(), null); 
    }
));



// Rule StringOperator
ruleStringOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'=' 
	{
        $current = grammarAccess.getStringOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getEQEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'==' 
	{
        $current = grammarAccess.getStringOperatorAccess().getEQ2EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getEQ2EnumLiteralDeclaration_1(), null); 
    }
)
    |(	'!=' 
	{
        $current = grammarAccess.getStringOperatorAccess().getNEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getNEEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'<>' 
	{
        $current = grammarAccess.getStringOperatorAccess().getNE2EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getNE2EnumLiteralDeclaration_3(), null); 
    }
)
    |(	'>' 
	{
        $current = grammarAccess.getStringOperatorAccess().getGTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getGTEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'>=' 
	{
        $current = grammarAccess.getStringOperatorAccess().getGEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getGEEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'<' 
	{
        $current = grammarAccess.getStringOperatorAccess().getLTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getLTEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'<=' 
	{
        $current = grammarAccess.getStringOperatorAccess().getLEEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getLEEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'like' 
	{
        $current = grammarAccess.getStringOperatorAccess().getLIKEEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getLIKEEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'~' 
	{
        $current = grammarAccess.getStringOperatorAccess().getLIKE2EnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getLIKE2EnumLiteralDeclaration_9(), null); 
    }
)
    |(	'unlike' 
	{
        $current = grammarAccess.getStringOperatorAccess().getUNLIKEEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getUNLIKEEnumLiteralDeclaration_10(), null); 
    }
)
    |(	'!~' 
	{
        $current = grammarAccess.getStringOperatorAccess().getUNLIKE2EnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getUNLIKE2EnumLiteralDeclaration_11(), null); 
    }
)
    |(	'starts' 
	{
        $current = grammarAccess.getStringOperatorAccess().getSTARTSEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getSTARTSEnumLiteralDeclaration_12(), null); 
    }
)
    |(	'ends' 
	{
        $current = grammarAccess.getStringOperatorAccess().getENDSEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getENDSEnumLiteralDeclaration_13(), null); 
    }
)
    |(	'contains' 
	{
        $current = grammarAccess.getStringOperatorAccess().getCONTAINSEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStringOperatorAccess().getCONTAINSEnumLiteralDeclaration_14(), null); 
    }
));



// Rule Type
ruleType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'file' 
	{
        $current = grammarAccess.getTypeAccess().getFILEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeAccess().getFILEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'folder' 
	{
        $current = grammarAccess.getTypeAccess().getFOLDEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeAccess().getFOLDEREnumLiteralDeclaration_1(), null); 
    }
)
    |(	'container' 
	{
        $current = grammarAccess.getTypeAccess().getCONTAINEREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeAccess().getCONTAINEREnumLiteralDeclaration_2(), null); 
    }
)
    |(	'project' 
	{
        $current = grammarAccess.getTypeAccess().getPROJECTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getTypeAccess().getPROJECTEnumLiteralDeclaration_3(), null); 
    }
));



// Rule Kind
ruleKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'reference' 
	{
        $current = grammarAccess.getKindAccess().getREFERENCEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getKindAccess().getREFERENCEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'nature' 
	{
        $current = grammarAccess.getKindAccess().getNATUREEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getKindAccess().getNATUREEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'builder' 
	{
        $current = grammarAccess.getKindAccess().getBUILDEREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getKindAccess().getBUILDEREnumLiteralDeclaration_2(), null); 
    }
));



RULE_BOOLEAN : ('false'|'true');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


