/*******************************************************************************
 * Copyright (c) 2010 Martin Fluegge (Berlin, Germany).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Martin Fluegge - initial API and implementation
 ******************************************************************************/
package org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.util.ClassdiagramAdapterFactory;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 */
public class ClassdiagramItemProviderAdapterFactory extends ClassdiagramAdapterFactory implements
    ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public ClassdiagramItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all
   * {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.AClass} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected AClassItemProvider aClassItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.AClass}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createAClassAdapter()
  {
    if (aClassItemProvider == null)
    {
      aClassItemProvider = new AClassItemProvider(this);
    }

    return aClassItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all
   * {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.AInterface} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected AInterfaceItemProvider aInterfaceItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.AInterface}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createAInterfaceAdapter()
  {
    if (aInterfaceItemProvider == null)
    {
      aInterfaceItemProvider = new AInterfaceItemProvider(this);
    }

    return aInterfaceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all
   * {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.ClassDiagram} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected ClassDiagramItemProvider classDiagramItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.ClassDiagram}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createClassDiagramAdapter()
  {
    if (classDiagramItemProvider == null)
    {
      classDiagramItemProvider = new ClassDiagramItemProvider(this);
    }

    return classDiagramItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all
   * {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.AnAttribute} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected AnAttributeItemProvider anAttributeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.AnAttribute}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createAnAttributeAdapter()
  {
    if (anAttributeItemProvider == null)
    {
      anAttributeItemProvider = new AnAttributeItemProvider(this);
    }

    return anAttributeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all
   * {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.AnOperation} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected AnOperationItemProvider anOperationItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.AnOperation}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createAnOperationAdapter()
  {
    if (anOperationItemProvider == null)
    {
      anOperationItemProvider = new AnOperationItemProvider(this);
    }

    return anOperationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all
   * {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.ABasicClass} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected ABasicClassItemProvider aBasicClassItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.ABasicClass}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createABasicClassAdapter()
  {
    if (aBasicClassItemProvider == null)
    {
      aBasicClassItemProvider = new ABasicClassItemProvider(this);
    }

    return aBasicClassItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all
   * {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.AParameter} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected AParameterItemProvider aParameterItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.AParameter}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createAParameterAdapter()
  {
    if (aParameterItemProvider == null)
    {
      aParameterItemProvider = new AParameterItemProvider(this);
    }

    return aParameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all
   * {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.AClassChild} instances. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  protected AClassChildItemProvider aClassChildItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.emf.cdo.dawn.reference.editor.classdiagram.AClassChild}. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter createAClassChildAdapter()
  {
    if (aClassChildItemProvider == null)
    {
      aClassChildItemProvider = new AClassChildItemProvider(this);
    }

    return aClassChildItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * 
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
   * 
   * @generated
   */
  public void dispose()
  {
    if (aClassItemProvider != null)
      aClassItemProvider.dispose();
    if (aInterfaceItemProvider != null)
      aInterfaceItemProvider.dispose();
    if (classDiagramItemProvider != null)
      classDiagramItemProvider.dispose();
    if (anAttributeItemProvider != null)
      anAttributeItemProvider.dispose();
    if (anOperationItemProvider != null)
      anOperationItemProvider.dispose();
    if (aBasicClassItemProvider != null)
      aBasicClassItemProvider.dispose();
    if (aParameterItemProvider != null)
      aParameterItemProvider.dispose();
    if (aClassChildItemProvider != null)
      aClassChildItemProvider.dispose();
  }

}
